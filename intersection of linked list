class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        l1, l2 = headA, headB
        while l1 != l2:
            l1 = l1.next if l1 else headB
            l1 = l2.next if l2 else headA
        return l1
        
Implementation in Python
Hereâ€™s a simple implementation in Python language.

def getIntersectionNode(self, headA, headB):
    if headA is None or headB is None:
        return None

    ptrA = headA
    ptrB = headB

    while ptrA is not ptrB:
        # if either pointer hits the end, switch head and continue the second traversal, 
        # if not hit the end, just move on to next
        ptrA = headB if ptrA is None else ptrA.next
        ptrB = headA if ptrB is None else ptrB.next

    return ptrA # only 2 ways to get out of the loop, they meet or the both hit the end=None
